print("version 1")
from threading import Thread
# import modules
import logging
from aiogram import Bot, Dispatcher, executor, types
import service.notify as nt
#self modules
import modules.product as pr
import service.button as btn
import modules.user as user
import mysql.connector


usersTaskReport = {}

API_TOKEN = '6064527659:AAFhLaVPjMcQBGQoqKoSPKoaR0YD7NKct6w'    # bot token here

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

Product = pr.Product()
User = user.User()
Button = btn.Button()
# command for bot
commentText = {

    '/start': 'start',

    '–û—Ç—á–µ—Ç—ã': Product.reports,

    '–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç': '''–ö–æ–º–º–∞–Ω–¥—ã –±–æ—Ç–∞:
     
        start :   –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–≥–æ 1 —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        
        help : 
            instruction:   –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ –±–æ—Ç—É
            info:   –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –±–æ—Ç—É 
        command:   –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    '''

}
getPhone = []
smsCode = []
smsPhone = []
lastMsg = False
userTaskSet = {
}
@dp.message_handler()
async def send_message(message: types.Message):
    global lastMsg
    print()
    isLog = User.checkLog(message.from_user.id)
    if lastMsg:
        await lastMsg.delete()
        lastMsg = False
    if message.from_user.id in smsCode and (message.text.split(" ")[0] in commentText) == False:
        answer = User.checkSMS(message.from_user.id, message.text, smsPhone[smsCode.index(message.from_user.id)])
        if answer[1]:
            isUsers = User.getIsUsers(message.from_user.id)
            if (len(isUsers) > 1):
                btn = Button.reportTaskBtn(isUsers)
                usersTaskReport[message.from_user.id] = False
                await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç!', reply_markup=btn)
            else:
                usersTaskReport[message.from_user.id] = isUsers[0][4]
                Product.dayPushOne(isUsers[0][4], message.from_user.id)
                Product.setTask(isUsers[0][4], message.from_user.id)
                btnSetting = Button.startButton()
                await message.reply("–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ë–û–¢–ê", reply_markup=btnSetting)
            smsCode.remove(message.from_user.id)
        else:
            lastMsg = await message.answer(answer[0])

    if message.from_user.id in getPhone and (message.text.split(" ")[0] in commentText) == False:

        answer = User.userLog(message.from_user.id, message.text)
        lastMsg = await message.answer(answer[0])
        if answer[1]:
            getPhone.remove(message.from_user.id)
            smsPhone.append(message.text)
            smsCode.append(message.from_user.id)


    if message.text.split(" ")[0] in commentText:
        if message.from_user.id in getPhone:
            getPhone.remove(message.from_user.id)
        if message.from_user.id in smsCode:
            smsCode.remove(message.from_user.id)

        if type(commentText[message.text.split(" ")[0]]) == str:
            if message.text == '/start':
                lastMsg = await message.answer("–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ RATE-THIS tg BOT")
                answer = User.checkLog("{0}".format(message.from_user.id))
                if answer[1]:
                    btnSetting = Button.phoneBTN()
                    getPhone.append(message.from_user.id)
                    lastMsg = await message.answer(answer[0], reply_markup=btnSetting)
                else:
                    isUsers = User.getIsUsers(message.from_user.id)
                    if(len(isUsers) > 1):
                        btn = Button.reportTaskBtn(isUsers)
                        usersTaskReport[message.from_user.id] = False
                        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç', reply_markup=btn)
                    else:
                        usersTaskReport[message.from_user.id] = isUsers[0][4]
                        Product.setTask(isUsers[0][4], message.from_user.id)
                        Product.dayPushOne(isUsers[0][4], message.from_user.id)
                        btnSetting = Button.startButton()
                        await message.reply("–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ë–û–¢–ê", reply_markup=btnSetting)

                print(answer[0])
        else:
            Button.getDateReport(1, message.from_user.id)
            print(Product.reports(message.from_user.id, 1, 3))

    print(123132, message.text == "üìë –û—Ç—á–µ—Ç üìä")
    if message.text == "üìë –û—Ç—á–µ—Ç üìä" and isLog[1] == False:
        btnSetting = Button.reportButton()
        lastMsg = await message.reply('''–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ—Ç—á–µ—Ç üìë
‚ùóÔ∏è–í—Å–µ –æ—Ç—á–µ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü, –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è, –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å. 
üõç–í—ã–∫—É–ø—ã- –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∫–æ–≥–¥–∞ –±—ã–ª–∏ –∑–∞–∫–∞–∑–∞–Ω—ã. 
üì¶–î–æ—Å—Ç–∞–≤–∫–∏- –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∫–æ–≥–¥–∞ –±—ã–ª–∏ –∑–∞–±—Ä–∞–Ω—ã 
üí¨–û—Ç–∑—ã–≤—ã- –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å —É –æ—Ç–∑—ã–≤–∞ –∏ –∫–æ–≥–¥–∞ –æ–Ω –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω 
üî•–û–±—â–∏–π –æ—Ç—á—ë—Ç- –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É —Å—Ç–∞—Ç—É—Å –∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.''', reply_markup=btnSetting)
    elif message.text == "üìë –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª üí¨" and isLog[1] == False:
        lastMsg = await message.reply('''üëã –î–∞–Ω–Ω—ã–π –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.
üî•–ë–æ—Ç —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤–∞–º:

1Ô∏è‚É£ –ö–∞–∫–æ–π —É –Ω–∞—Å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
2Ô∏è‚É£ –°–≤–µ—Ä—è–µ—Ç —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞ 
3Ô∏è‚É£ –ì–æ–≤–æ—Ä–∏—Ç –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
4Ô∏è‚É£ –û —Å—Ç–∞—Ç—É—Å–∞—Ö —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø–≤–∑
5Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ —Å–±–æ—Ä–∫—É –∫–æ—Ä–∑–∏–Ω—ã 
6Ô∏è‚É£ –ö–æ–≥–¥–∞ –º—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—à —Ç–æ–≤–∞—Ä, 
7Ô∏è‚É£ –ö–æ–≥–¥–∞ –º—ã –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –Ω–µ–≥–æ –æ—Ç–∑—ã–≤—ã. 
8Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ 
–î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã:
üõç –ü–æ –≤—ã–∫—É–ø–∞–º, 
üí¨ –û—Ç–∑—ã–≤–∞–º, 
üì¶ –î–æ—Å—Ç–∞–≤–∫–∞–º. 
–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à—É —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ. üòò
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ ‚ÜôÔ∏è
@Rate_this_grop_bot''')
    elif message.text == 'üìë –ö–∞–±–∏–Ω–µ—Ç üí¨' and isLog[1] == False:
        isUsers = User.getIsUsers(message.from_user.id)
        btn = Button.reportTaskBtn(isUsers)

        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç', reply_markup=btn)
    if message.text == 'rate-this':
        Product.nightPush()



typeList = {

}

@dp.callback_query_handler()
async def process_callback_button1(callback_query: types.CallbackQuery):
    global lastMsg, usersTaskReport
    if lastMsg:
        await lastMsg.delete()
        lastMsg = False
    query = callback_query.data
    isLog = User.checkLog(callback_query.from_user.id)
    if 'task-report' in query:
        if not usersTaskReport[callback_query.from_user.id]:
            btnSetting = Button.startButton()
            await bot.send_message(callback_query.from_user.id, "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ë–û–¢–ê", reply_markup=btnSetting)
        print(query.split('|')[1])
        Product.dayPushOne(query.split('|')[1], callback_query.from_user.id)
        Product.setTask(query.split('|')[1], callback_query.from_user.id)
        usersTaskReport[callback_query.from_user.id] = query.split('|')[1]

    if "reportType" in query and isLog[1] == False:
        if query.split('|')[1] == '4':
            answer = Product.reports(callback_query.from_user.id, int(query.split('|')[1]), 5)
            doc = open(answer, 'rb')
            await bot.send_document(chat_id=callback_query.from_user.id, document=doc, caption=f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            btnSetting = Button.reportDateButton()
            typeList[callback_query.from_user.id] = int(query.split('|')[1])
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫–∏!', reply_markup=btnSetting)
        await callback_query.message.delete()
    elif "report date" in query and isLog[1] == False:

        if query.split('|')[1] == '4':
            print(query.split('|')[1])
            btnSetting = Button.currentDayReport(callback_query.from_user.id, typeList[callback_query.from_user.id])

            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫–∏!', reply_markup=btnSetting)
        else:
            answer = Product.reports(callback_query.from_user.id, typeList[callback_query.from_user.id], int(query.split('|')[1]))
            doc = open(answer, 'rb')
            await bot.send_document(chat_id=callback_query.from_user.id, document=doc,caption=f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await callback_query.message.delete()
    elif "reportdt" in query and isLog[1] == False:
        answer = Product.reports(callback_query.from_user.id, typeList[callback_query.from_user.id], 4, query.split('|')[1])
        doc = open(answer, 'rb')
        await bot.send_document(chat_id=callback_query.from_user.id, document=doc, caption=f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback_query.message.delete()


@dp.message_handler(content_types=['contact'])
async def contact(message):
    global lastMsg
    if lastMsg:
        await lastMsg.delete()
        lastMsg = False
    if message.from_user.id in getPhone:

        answer = User.userLog(message.from_user.id, str(message.contact.phone_number))
        await message.answer(answer[0])
        if answer[1]:
            getPhone.remove(message.from_user.id)
            smsPhone.append(message.contact.phone_number)
            smsCode.append(message.from_user.id)
    await message.delete()
th = Thread(target=nt.checkNot)
th.start()




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

